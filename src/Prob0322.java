package com.leetcode.explore;

import java.util.Arrays;

/*

零钱兑换

给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。

你可以认为每种硬币的数量是无限的。

示例 1：
输入：coins = [1, 2, 5], amount = 11
输出：3
解释：11 = 5 + 5 + 1

示例 2：
输入：coins = [2], amount = 3
输出：-1

示例 3：
输入：coins = [1], amount = 0
输出：0

示例 4：
输入：coins = [1], amount = 1
输出：1

示例 5：
输入：coins = [1], amount = 2
输出：2

提示：
1 <= coins.length <= 12
1 <= coins[i] <= 2^31 - 1
0 <= amount <= 10^4

*/

public class Prob0322 {

    // 备忘录
    class Solution1 {
        public int coinChange(int[] coins, int amount) {
            int[] memo = new int[amount + 1];
            Arrays.fill(memo, -2);
            return helper(coins, amount, memo);
        }

        private int helper(int[] coins, int amount, int[] memo) {
            if (amount == 0) return 0;
            if (memo[amount] != -2) return memo[amount];
            int res = Integer.MAX_VALUE;
            for (int coin : coins) {
                if (amount - coin < 0) continue;
                int sub = helper(coins, amount - coin, memo);
                if (sub == -1) continue;
                res = Math.min(res, sub + 1);
            }
            memo[amount] = (res == Integer.MAX_VALUE ? -1 : res);
            return memo[amount];
        }
    }

    // 自底而上动态规划
    class Solution2 {
        public int coinChange(int[] coins, int amount) {
            int[] dp = new int[amount + 1];
            Arrays.fill(dp, amount + 1);
            dp[0] = 0;
            for (int i = 1; i <= amount; ++i) {
                for (int coin : coins) {
                    if (coin <= i) dp[i] = Math.min(dp[i], dp[i - coin] + 1);
                }
            }
            return dp[amount] == amount + 1 ? -1 : dp[amount];
        }
    }
}
