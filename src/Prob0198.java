package com.leetcode.explore;

import java.util.Arrays;

/*

打家劫舍

你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
给定一个代表每个房屋存放金额的非负整数数组，计算你不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。

示例 1：
输入：[1,2,3,1]
输出：4
解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。偷窃到的最高金额 = 1 + 3 = 4 。

示例 2：
输入：[2,7,9,3,1]
输出：12
解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。偷窃到的最高金额 = 2 + 9 + 1 = 12 。
 
提示：
0 <= nums.length <= 100
0 <= nums[i] <= 400

*/

public class Prob0198 {
	class Solution1 {
		public int rob(int[] nums) {
			int len = nums.length;
			int[] memo = new int[len];
			Arrays.fill(memo, -1);
			return helper(nums, len - 1, memo);
		}

		private int helper(int[] nums, int index, int[] memo) {
			if (index < 0) return 0;
			if (memo[index] != -1) return memo[index];
			int res = Math.max(helper(nums, index - 2, memo) + nums[index], helper(nums, index - 1, memo));
			memo[index] = res;
			return res;
		}
	}

	class Solution2 {
		public int rob(int[] nums) {
			int len = nums.length;
			if (len == 0) return 0;
			int[] dp = new int[len + 1];
			dp[0] = 0;
			dp[1] = nums[0];
			for (int i = 2; i <= len; ++i) {
				dp[i] = Math.max(dp[i - 2] + nums[i - 1], dp[i - 1]);
			}
			return dp[len];
		}
	}

	class Solution3 {
		public int rob(int[] nums) {
			int prev = 0;
			int cur = 0;
			for (int i : nums) {
				int temp = Math.max(cur, prev + i);
				prev = cur;
				cur = temp;
			}
			return cur;
		}
	}
}
